% Code Written by Hellen C. Ancelmo, Universidade Tecnológica Federal do paraná.
% E-Mail: hellen@alunos.utfpr.edu.br
%
% This function calculated the prony's approch using a COOLL dataset codes
% based on this article:
% Rodríguez, A. F., de Santiago Rodrigo, L., Guillén, E. L., Ascariz, J. M. R., 
% Jiménez, J. M. M., & Boquete, L. (2018). Coding Prony’s method in MATLAB and 
% applying it to biomedical signal filtering. BMC Bioinformatics, 19. 
% https://doi.org/10.1186/s12859-018-2473-y
%
%
% where
% scaleFactors.txt = scale factor from COOLL dataset, available in https://coolldataset.github.io/
% instantes_COOLL_100kHz.mat = ON and OFF moments of curves in samples ->
% [on off] available in this github
% estimado_final = Signal reconstruction from characteristics
% 

% Amp, alfa, freq, theta -> estimated features.


clear all
close all
clc

load('scaleFactors.txt') % scale factor from COOLL dataset
load('instantes_COOLL_100kHz.mat') % ON and OFF moments of curves in samples


%% Signal parameters

inst = instantes_COOLL_100kHz; % ON and OFF moments of curves in samples
ta = 100000; % original sampling rate
decim = 100; % Decimate value
f = 50; % Signal frequency
ciclo = ta/f; % Number of samples per cycle
Ts = 1/ta; % Sampling period
n_curvas = 840; % Base signal number


%%
for ii=1:n_curvas
    
    % Load of .flac files
    corrente = audioread(sprintf('scenarioC1_%d.flac',ii));
    corrente = corrente * scaleFactors(ii,1);
    
    % Defines start and end time of window to be estimated
    n_ciclo = 10; % number of cycles to be analyzed
    [teste,inst_inicial] =  max((corrente(inst(ii):inst(ii)+5*ciclo))); % Initial window instant
    inst_final = inst_inicial + n_ciclo*ciclo; % End of window
    sinal = corrente(inst(ii)+inst_inicial:inst(ii)+inst_final); % Samples to be analyzed
    sinal = sinal - mean(sinal); % Signal Average Subtraction
    sinal_decimado = decimate(sinal,decim); % Signal decimation
    
    % Definition of methods
    order = 15; % Reconstruction order 
    
    % Now, decide which method to use and comment out
    
    % Using a polynomial method
    method = 'LS'; % 'TLS' or 'CLASSIC'
    [Amp,alfa,freq,theta] = polynomial_method(sinal_decimado,order,Ts,method);
    
    % Using a matrix pencil method
    %[Amp,alfa,freq,theta] = matrix_pencil(sinal_decimado,order,Ts);
    
  % Signal reconstruction from characteristics   
    estimado = 0;
    
    for kk=1:length(Amp)
        
        for n=2:length(sinal_decimado)
            
            estimado(kk,n) = Amp(kk) * exp(1i*theta(kk)) .* exp((alfa(kk) + 1i*2*pi*freq(kk))*(Ts)*(n-1));
            
        end
        
    end
    
    estimado_final(ii,:) = real(sum(estimado))'; % rebuilt sign  
end
