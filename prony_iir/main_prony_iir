    %% Método de Prony
    curva_sub = Its_r;
   
    f = 60;
    ta = samples_tbl(1).sample_freq; % frequencia de amostragem
    decim = 5;
    
    % Decimação do Sinal
    sinal_1 = decimate(Its_r,decim);
    ciclo = floor(length(sinal_1)*decim/f);
    
    % Definição do instante inicial
   [~,inst_inicial] =  max(abs(sinal_1(1:(ciclo*2)))); 
   [~,inst_final] =  min(sinal_1((ciclo*8):end)); 
   sinal = sinal_1((inst_inicial):(ciclo*8 + inst_final));
    
    % Subtração da média
    sinal = sinal - mean(sinal);
%     sinal = sinal_2;
    
    % Vetor tempo do sinal
    t = 0: decim/ta : (decim/ta * (length(sinal)-1));
    
    % Parâmetros do Método
    NewVal = ExtractionParams_DB.param1;
    SUBN = ExtractionParams_DB.param2;
        
    % Prony com ordem e número de polos/zeros pré-definidos
    [iapp,ai,a_list,tau_list,omega_list,SUB_IND,energy,p,inumz,idenz]=applyprony_modify(t,sinal,NewVal,SUBN,1);
    [inummz,idennz]=residuez(a_list,p,1);

    ct=0;
    promptstr={};
    cont=1;
    for j=SUB_IND
        ct=ct+1;    
        promptstr=[promptstr;{[num2str(ct,'%2d'),blanks(12),num2str(abs(2*a_list(j)),'%10.1e'),...
                        blanks(12),num2str(1/tau_list(j),'%12.1e'),...
                        blanks(12),num2str(abs(omega_list(j)/(2*pi)),'%12.1e'),...
                        blanks(12)
                        ]}]; 
        fase(cont) = angle(2*a_list(j));
        cont = cont+1;
    end

    % Definição das características
    b = strvcat(promptstr);

    for j=1:length(promptstr)
        c{j} = strsplit(b(j,:),' ');
    end
    for w=1:SUBN
        ampli(w,:) = str2num(c{1, w}{1,2});
        damp(w,:) = str2num(c{1, w}{1,3});
        freq(w,:) = str2num(c{1, w}{1,4});           
    end   
    
    % Decisão de qual característica extrair
    
    if ExtractionParams_DB.param3 == 1
        vetor_features_p = [ampli' damp' freq' fase]; % Características de reconstrução
    
    if ExtractionParams_DB.param3 == 2
        vetor_features_p = [inumz idenz]; % Coeficientes de H(z)
    end
    
    if ExtractionParams_DB.param3 == 3
        vetor_features_p = [imag(inummz) real(inummz) imag(idennz) real(idennz)];  % Polos e zeros de H(z)
    end
    
    if ExtractionParams_DB.param3 == 4
        vetor_features_p = [abs(inummz) angle(inummz) abs(idennz) angle(idennz)]; % Polos e zeros de H(z)
    end
   

